====== Kamailio SIP Server - New Features in v5.5.x ======

<fc #0000FF>
**Previous version was 5.4.x (released on July, 2020), see what was new in that release at**:
</fc>
  * <fc #0000FF>http://www.kamailio.org/wiki/features/new-in-5.4.x</fc>

<fc #800000>//This is a draft of new features added in this version, manually updated, thus not always synchronized with what is new in source code repository.//</fc>

===== Documentation =====

Many fixes were done to the modules, missing parameter were added, wrong parameter or function names fixed and explanation or clarifications added. Furthermore many debug messages in the core and modules were extended, to help analyzing problems or bugs. The full details can be found in the release Changelog or with the "git log" command.

===== Bugfixes =====

Countless bugfixes were implemented for this release in core, tools and modules. Furthermore the code base was scanned with several static analyzers, to detect otherwise hard to find bugs. The full details can be found in the release Changelog or with the "git log" command.

===== New Modules =====

==== sworker ====

New module to delegate sip message processing to a group of workers

  * https://www.kamailio.org/docs/modules/5.5.x/modules/sworker.html

===== New in existing Modules =====

==== acc ====

  * add to-tag for locally generated replies
  * use sent reason phrase for locally generated replies
  * new parameter acc_extra_nullable to set NULL for variables that are $null
  * adapt database scheme to support for acc_extra_nullable and cdr_extra_nullable

==== auth_radius ====

  * add VENDOR() definition if the freeradius-client library does not contain one already

==== async ====

  * fix async_ms_route and export it to kemi

==== cfgutils ====

  * export route check functions to kemi

==== cfgt ====

  * logging improvements

==== crypto ====

  * add crypto_hmac_sha256() function

==== corex ====

  * add rpc command shm.info
  * add rpc command shm.stats

==== ctl ====

  * skip handling rpc commands if kamailio is in shutdown phase

==== dmq ====

  * new parameter notification_channel to set the channel id for peer notifications
  * use more standard terms in documentation

==== dmq_usrloc ====

  * do not replicate socket if the field is not set

==== dialog ====

  * logging improvements
  * internal locking improvements
  * skip CSEQ updates for certain messages

==== dispatcher ====

  * update state if sending keepalive OPTIONS fails
  * sync on updating last used fields
  * internal refactoring
  * add an attribute to preset the latency estimator
  * congestion control logic refactoring, to handle misconfiguration gracefully
  * add test no-dns flag to skip ip matching for hostnames
  * dispatcher add new algorithm 13, latency optimized round-robin with failover

==== drouting ====

  * enable SRV DNS queries

==== evapi ====

  * export async_unicast() and async_multicast() to kemi

==== htable ====

  * improve DMQ synchronisation for hash table operations

==== http_client ====

  * add http_client_get() function to do explicit GET request with headers (and body)

==== http_async_client ====

  * set curl memory callbacks in module initialization
  * add http_time pseudovariable

==== imc ====

  * jump over printing error log messages when list commands are ok

==== ims_charging ====

  * use correct default User-Equipment-Info-Type AVP format

==== ims_usrloc_scscf ====

  * add a new contact state, udomain/impu and cleanup timer improvements
  * add a new parameter for reverse search in get_pcontact

==== ims_registrar_scscf ====

  * added a new registrar event, notification improvements
  * update_contacts, if the reply doesn't include contact alias, get received info from the request
  * fix extraction of received host in save()

==== ims_ipsec_pcscf ====

  * add a new function parameter to delete unused tunnels before creation of new ipsec connection
  * add new global parameters for ipsec listen addresses.
  * extension related to reverse search functionality

==== ims_qos ====

  * extension related to reverse search functionality

==== jansson ====

  * Add en-/decode to/from xavp function
  * internal refactoring

==== janssonrpcc ====

  * internal refactoring

==== jsonrpcs ====

  * exported dispatch() function to kemi

==== kemix ====

  * exported function get_rcvadvip() and get_rcvadvport()
  * exported functions to get socket string and name
  * add functions to get contact header uri
  * exported functions to get define values

==== kex ====

  * use mutex to sync the mod mem stats rpc commands
  * add pkg.info rpc command, to get details about pkg manager
  * internal refactoring and optimization

==== keepalive ====

  * logging improvements
  * improvements in internal data structure passing to other modules
  * prevent race condition when deleting a destination
  * improve module initialization logic

==== log_custom ====

  * print to stderror if sending log message fails

==== nathelper ====

  * fix_nated_sdp added support for a=rtcp param RFC3605

==== ndb_redis ====

  * fix cluster support
  * logging improvements

==== misc_radius ====

  * add VENDOR() definition if the freeradius-client library does not contain one already

==== msrp ====

  * proper parsing ipv6 host part in uri

==== mqueue ====

  * use HTTP status codes for rpc
  * add rpc mqueue.sizes to return queue sizes
  * add more rpc features

==== permissions ====

  * exported allow_trusted() to kemi
  * enforce limit in reload interval time, add reload_delta parameter to configure rate limit

==== pike ====

  * add rpc function pike.top, support for case insensitive match of parameter
  * add pike_check_ip(ipaddr), check the parameter ipaddr in the pike tree

==== pua ====

  * update_version_puadb() use pres_id to select record
  * fix send_publish() behavior on PUA_DB_ONLY

==== pv ====

  * new transformation {uri.suri} to get the simple routing uri, keep only transport parameter, if exists
  * new transformation {uri.duri} to get the uri needed for destination address (e.g., sip:host:port;transport=tcp)
  * new transformation {uri.saor} to get the sip aor (sip:[user@]domain)
  * add xavp_slist_explode(), breaks a string in tokens by separators, storing them in xavp
  * new variable $Rn - return receiving socket name
  * new variable $defn(name), return the value of a define converted to number

==== p_usrloc ====

  * reworking of mdb_availability_control functionality

==== registrar ====

  * documentation improvements
  * add functionality to store advertised address instead of bind address in socket field, default is existing behavior
  * allow taking expires value from xavp_cfg expires field

==== rtpengine ====

  * support new codec flags, adds explicit support for codec-set and codec-except.
  * add CRC32 hash algorithm for message hashing
  * query round-trip-time per call leg 

==== rr ====

  * new function loose_route_mode(vmode), to specify certain loose routing behavior
  * use safer msg_ctx_id_t checks for asserting validity of cached param value

==== rtp_media_server ====

  * update to mediastreamer 4.4.0
  * state transition improvement, fix disconnection while in bridge,

==== sanity ====

  * extended check 4 (required headers) for uniqueness, Call-ID, CSeq, From and To have to present only once

==== secsipid ====

  * add parameter to set url file cache options
  * add secsipid_check_identity_pubkey(pubkeyVal) function to check the identity header validity with a public key
  * new function secsipid_get_url(url, ovar), convenience function to get the content of an URL and store the result

==== sl ====

  * add new function send_reply_mode() to control the execution mode

==== smsops ====

  * use proper length for concatenated SMS according to TS 23.040, section 9.2.3.16

==== sipdump ====

  * if drop executed in event route, skip writing to file
  * refactoring to support more storage engines, like writing UDP pcap files or adding P-KSR-SIPDump header

==== siptrace ====

  * exec event_route[siptrace:msg] on message replication with core events

==== sqlops ====

  * new modparam results_maxsize, allow setting the maximum size of the result containers list

==== textops ====

  * correct behaviour for append_hf, adds header after last header occurrence
  * added functions to manipulate the message body in the exported api

==== topoh ====

  * remove the Via cookie when skipping topoh via event route
  * event route is now executed with parsed sip message to be sent out
  * execute msg-outgoing and msg-sending event routes, similar to topos module

==== topos ====

  * update to-tag and rr on reply even to-tag is already set
  * store branch record before dialog record

==== tls ====

  * support compilation without deprecated OpenSSL APIs
  * export function KSR.tls.cget(aname) to kemi

==== tm ====

  * logging improvements
  * do not add duplicate headers in local requests
  * Instead of passing the to be evaluated reply as the "best" reply, pass the actual "best" reply
  * fix ordering of contact loading after proportional loading extensions
  * export t_relay_to_xxx protocol functions to kemi
  * export t_relay_to_<proto>(host, port) functions to kemi
  * correct 200 OK processing by proxy after a final non-2xx reply

==== tmx ====

  * safety check of expected route blocks for using $T_*() variables
  * Allow $T_branch(flags) in onreply_route

==== textops ====

  *  added change_reply_status_code() function to change only the status code for non-2xx replies

==== topos ====

  * add two new modes for topology hiding to preserve Contact user necessary for certain interconnection providers

==== uac ====

  * added uac_event_callback for kemi
  * restore first display name then uri with dialog callback
  * support to set contact address in uacreg database record, enable per registration contact address
  * allow empty contact addr in rpc add command for uacreg, it has to be set to .
  * logging and documentation improvements
  * new rpc command uac.reg_unregister to unregister records

==== usrloc ====

  * export ka_logmsg parameter to kemi
  * print Route header name in keepalive when Path is present
  * export modparam to set keepalive timeout
  * use unsigned int for rpc output for the fields having this type
  * do keepalive-based contact expire on internal callback
  * set last keepalive value to current time on new records
  * also send keepalive over ws and wss connections

==== xhttp_server ====

  * internal improvements for xpath search function

==== xhttp_prom ====

  * add support for histogram metrics

===== New in Core =====

  * add websocket event support
  * several build infrastructure improvements for MacOS with clang compiler
  * support for gcc 10.x compiler in build infrastructure
  * add a global flag in shared memory to detect server shutdown
  * build improvements for FreeBSD
  * remove internal abort() calls in certain lump handling related functions
  * improve http/2 support, support also requests, internal refactoring
  * logging improvements for core utility functions, DB1 API and other
  * relocation and refactoring on core ip addr handling code
  * Zero terminate str copies made with pkg_str_dup() and shm_str_dup()
  * Refactor tcp flags to enum, add more typedefs
  * Improvements in DNS support for NAPTR records
  * add helper function to parse all contact headers to parser
  * add functionality to delegate sip processing to a group of workers
  * improve signal handling from system

==== SIP parser ====

  * simplify implementation, use static map for header name and type for parsing
  * logging improvements

==== Command line arguments ====

  * new command line parameter --cfg-print to output the config file by evaluating includes ifdefs, subst and define pre-processor directive

==== Interpreter ====

  * exported core route function to kemi
  * new preprocessor directive #!defenv ID=ENVVAR, define an ID to the value of an environment variable with the name ENVVAR, also possible to use #!defenv ENVVAR
  * new event_route[core:pre-routing], executed before running config script for SIP messages, if received from the network  

==== Parameters ====

  * add sip_parser_log core parameter to log parser error with a certain log level
  * add hdr_name_extra_chars parameter to allow specific characters in header names
  * new parameter ipv6_hex_style, default is the now lowercase and compact, to follow recommendations of RFC5952, section 4.2.1 and 4.3
  * new parameter sip_parser_mode, allow to control how sip parser behaves and how strict it is, default is existing mode
  * add local_rport parameter, similar to add_local_rport() but set globally
  * new parameter async_workers_group to define groups of async worker processes

==== Functions ====

  * add utility helper functions to search variants of str in another str
  * add parser wrapper function to parse str header name
  * add kemi function hdr.match_content(hname, op, mval, hidx)
  * add tcp helper function to send data over ws/wss connection
  * add utility helper function to search a token before an end pointer

==== Memory Managers ====

  *  define mem_counter struct in meminfo for all memory managers

==== Architecture ====

  * further migration of many modules to use core SHM_MEM_ERROR and PKG_MEM_ERROR defines
  * add CAP_CHOWN capability to Kamailio systemd service files to allow chown needed for some modules

==== kamailio.cfg ====

  * set load_backends to 1 for permissions module, the config uses only address table
  * improve checks related to SIP scanning tools

===== Tools =====

  * pdbt: use more relaxed permission when creating files
  * misc/tools/kemi: lua tools useful for using Kamailio with KEMI Lua scripts

==== kamcmd ====

==== kamctl ====

  * aaa

==== kamdbctl ====

  * proper id format for dbtext records
  * increased contact_addr_len entity to 255, e.g. for IMS use-cases

==== kamcli ====
